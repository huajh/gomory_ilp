This file contains further instructions for the final lab project in
Optimization Theory.
*****************************************************
Topic: A Computational Study of the Coding Theory ILP

Format: Submit a paper copy of your report 
        with your name, affiliation, student no. to my letterbox on the
        1st floor of the ISEE building. The length of the report is
        limited to 6 pages.

Deadline: Wednesday, May 7, 2014, 12pm

Coverage: Apply Gomory's Method for solving ILPs to the Coding Theory
ILP, as discussed in the lecture. The study should include at least
the parameter ranges 3 <= k <= 6, 1 <= d <= ((k-1)/2)*2^(k-1). These
are the pairs (k,d) with 3 <= k <= 6, for which the optimal value
zeta^* (minimal code length) is not known in advance. List only those
objective values \zeta^* that are strictly larger than the Griesmer
bound (see lecture), together with an optimal solution
x^*. Provide computational statistics (running time, no. of
iterations/pivot steps).

Further Notes: 

You may use any standard programming environment and/or mathematical
software such as C, C++, MATLAB, SAGE, etc. It is recommended that you
implement Gomory's algorithm from scratch, since this gives you
complete control over all features of your program and makes it easy
to provide the additional data (timing, etc.) required.

Use a simple rule for determining the new cutting plane during each
iteration (and don't try to generalize the idea of combining several
fractional rows of A outlined in the lecture).

The number system used in the implementation may be an issue. Use
exact rational arithmetic, if possible. Floating point
operations may invalidate the results (but you can give it a try).

The first row of the matrix A = A_k (notation as in the lecture) is 
tabulated below for 3 <= k <= 8, using a simple SAGE program and the
so-called trace representation of M-sequences. You may just copy the
data, without bothering about the theory behind it.

sage: for k in range(3,9):
    F.<a>=GF(2^k)
    s=[]
    for i in range(2^k-1):
        s.append((a^(-i)).trace())
    print "First row of A for k =",k,":"    
    print s
....:     
First row of A for k = 3 :
[1, 1, 1, 0, 1, 0, 0]
First row of A for k = 4 :
[0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0]
First row of A for k = 5 :
[1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0]
First row of A for k = 6 :
[0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0]
First row of A for k = 7 :
[1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
First row of A for k = 8 :
[0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0]

If any questions arise during the work, which you cannot resolve
yourself, send me an email at honold@zju.edu.cn.

Th.Honold, 2014/4/25 